# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: python-template

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource:
        - ${self:provider.environment.SNS_ARN}

  environment:
    #DYNAMODB_INDICATORS_TABLE: ${self:service}-${self:provider.stage}-indicators
    SNS_ARN: arn:aws:sns:us-east-2:462951922947:sns-lambda-test



# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - dynamodb:Query
#        - dynamodb:Scan
#        - dynamodb:GetItem
#        - dynamodb:PutItem
#        - dynamodb:UpdateItem
#        - dynamodb:DeleteItem
#      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_INDICATORS_TABLE}"


#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:

  check_strategy_ABC:
    handler: TradingStrategy123.check_strategy_ABC
    events:
        - sns: arn:aws:sns:us-east-2:462951922947:sns-lambda-invoker

  check_strategy_gp:
    handler: GeneticStrategy.check_strategy_gp
    events:
        - sns: arn:aws:sns:us-east-2:462951922947:sns-lambda-invoker

  # events:
  #   - sns: <ADD HERE>

  # hello:
  #   handler: handler.hello
  #   events:
  #     - sns: arn:aws:sns:us-east-1:983584755688:itt-sns-data-core-stage
  # test_redis:
  #   handler: test_redis.test_redis
  #   events:
  #    - http:
  #        path: test_redis
  #        method: get
  # test_dynamodb:
  #   handler: test_dynamodb.test_dynamodb
  #   events:
  #    - http:
  #        path: test_dynamodb
  #        method: get


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    # events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
     # - sns: arn:aws:sns:us-east-1:983584755688:itt-sns-data-core-stage
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

#resources:
#  Resources:
#    indicatorsTable:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: ${self:provider.environment.DYNAMODB_INDICATORS_TABLE}
#        AttributeDefinitions:
#          - AttributeName: primary_key
#            AttributeType: S
#        KeySchema:
#          - AttributeName: primary_key
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux   # need Docker for serverless-python-requirements to work properly on my setup